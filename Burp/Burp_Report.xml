<?xml version="1.0"?>
<!DOCTYPE issues [
        <!ELEMENT issues (issue*)>
        <!ATTLIST issues burpVersion CDATA "">
        <!ATTLIST issues exportTime CDATA "">
        <!ELEMENT issue (serialNumber, type, name, host, path, location, severity, confidence, issueBackground?, remediationBackground?, references?, vulnerabilityClassifications?, issueDetail?, issueDetailItems?, remediationDetail?, requestresponse*, collaboratorEvent*, infiltratorEvent*)>
        <!ELEMENT serialNumber (#PCDATA)>
        <!ELEMENT type (#PCDATA)>
        <!ELEMENT name (#PCDATA)>
        <!ELEMENT host (#PCDATA)>
        <!ATTLIST host ip CDATA "">
        <!ELEMENT path (#PCDATA)>
        <!ELEMENT location (#PCDATA)>
        <!ELEMENT severity (#PCDATA)>
        <!ELEMENT confidence (#PCDATA)>
        <!ELEMENT issueBackground (#PCDATA)>
        <!ELEMENT remediationBackground (#PCDATA)>
        <!ELEMENT references (#PCDATA)>
        <!ELEMENT vulnerabilityClassifications (#PCDATA)>
        <!ELEMENT issueDetail (#PCDATA)>
        <!ELEMENT issueDetailItems (issueDetailItem*)>
        <!ELEMENT issueDetailItem (#PCDATA)>
        <!ELEMENT remediationDetail (#PCDATA)>
        <!ELEMENT requestresponse (request?, response?, responseRedirected?)>
        <!ELEMENT request (#PCDATA)>
        <!ATTLIST request method CDATA "">
        <!ATTLIST request base64 (true|false) "false">
        <!ELEMENT response (#PCDATA)>
        <!ATTLIST response base64 (true|false) "false">
        <!ELEMENT responseRedirected (#PCDATA)>
        <!ELEMENT sender (#PCDATA)>
        <!ELEMENT message (#PCDATA)>
        <!ELEMENT conversation (#PCDATA)>
        <!ELEMENT recipient (#PCDATA)>
        <!ELEMENT recipients (recipient*)>
        <!ELEMENT smtp (sender, recipients, message, conversation)>
        <!ELEMENT collaboratorEvent (interactionType, originIp, time, lookupType?, lookupHost?, requestresponse?, smtp?)>
        <!ELEMENT interactionType (#PCDATA)>
        <!ELEMENT originIp (#PCDATA)>
        <!ELEMENT time (#PCDATA)>
        <!ELEMENT lookupType (#PCDATA)>
        <!ELEMENT lookupHost (#PCDATA)>
        <!ELEMENT infiltratorEvent (parameterName, platform, signature, stackTrace?, parameterValue?, collaboratorEvent)>
        <!ELEMENT parameterName (#PCDATA)>
        <!ELEMENT platform (#PCDATA)>
        <!ELEMENT signature (#PCDATA)>
        <!ELEMENT stackTrace (#PCDATA)>
        <!ELEMENT parameterValue (#PCDATA)>
        ]>
<issues burpVersion="1.7.32" exportTime="Sun Apr 16 19:33:58 IST 2017">
    <issue>
        <serialNumber>1445777632492260352</serialNumber>
        <type>16777728</type>
        <name><![CDATA[Unencrypted communications]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/]]></path>
        <location><![CDATA[/]]></location>
        <severity>Low</severity>
        <confidence>Certain</confidence>
        <issueBackground><![CDATA[<p>The application allows users to connect to it over unencrypted connections.  An attacker suitably positioned to view a legitimate user's network traffic could record and monitor their interactions with the application and obtain any information the user supplies. Furthermore, an attacker able to modify traffic could use the application as a platform for attacks against its users and third-party websites. Unencrypted connections have been exploited by ISPs and governments to track users, and to inject adverts and malicious JavaScript. Due to these concerns, web browser vendors are planning to visually flag unencrypted connections as hazardous.</p>
<p>
To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.
</p>
<p>Please note that using a mixture of encrypted and unencrypted communications is an ineffective defense against active attackers, because they can easily remove references to encrypted resources when these references are transmitted over an unencrypted connection.</p>]]></issueBackground>
        <remediationBackground>
            <![CDATA[<p>Applications should use transport-level encryption (SSL/TLS) to protect all communications passing between the client and the server. The Strict-Transport-Security HTTP header should be used to ensure that clients refuse to access the server over an insecure connection.</p>]]></remediationBackground>
        <references><![CDATA[<ul>
<li><a href="https://www.chromium.org/Home/chromium-security/marking-http-as-non-secure">Marking HTTP as non-secure</a></li>
<li><a href="https://wiki.mozilla.org/Security/Server_Side_TLS">Configuring Server-Side SSL/TLS</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security">HTTP Strict Transport Security</a></li>
</ul>]]></references>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/326.html">CWE-326: Inadequate Encryption Strength</a></li>
</ul>]]></vulnerabilityClassifications>
    </issue>
    <issue>
        <serialNumber>1284853363795255296</serialNumber>
        <type>5245344</type>
        <name><![CDATA[Frameable response (potential Clickjacking)]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/]]></path>
        <location><![CDATA[/]]></location>
        <severity>Information</severity>
        <confidence>Firm</confidence>
        <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
        <remediationBackground>
            <![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
        <references>
            <![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/693.html">CWE-693: Protection Mechanism Failure</a></li>
</ul>]]></vulnerabilityClassifications>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC8gSFQ=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>8799073178541585408</serialNumber>
        <type>3145984</type>
        <name><![CDATA[Cleartext submission of password]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/]]></path>
        <location><![CDATA[/]]></location>
        <severity>High</severity>
        <confidence>Certain</confidence>
        <issueBackground><![CDATA[<p>Some applications transmit passwords over unencrypted connections, making them vulnerable to interception. To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.</p>
<p>Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>]]></issueBackground>
        <remediationBackground>
            <![CDATA[<p>Applications should use transport-level encryption (SSL or TLS) to protect all sensitive communications passing between the client and the server. Communications that should be protected include the login mechanism and related functionality, and any functions where sensitive data can be accessed or privileged actions can be performed. These areas should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications. If HTTP cookies are used for transmitting session tokens, then the secure flag should be set to prevent transmission over clear-text HTTP.</p>]]></remediationBackground>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/319.html">CWE-319: Cleartext Transmission of Sensitive Information</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The page contains a form with the following action URL, which is submitted over clear-text HTTP:<ul><li>http://testhtml5.vulnweb.com/login</li></ul>The form contains the following password field:<ul><li>password</li></ul>]]></issueDetail>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC8gSFQ=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>7602541171843293184</serialNumber>
        <type>5244928</type>
        <name><![CDATA[Password field with autocomplete enabled]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/]]></path>
        <location><![CDATA[/]]></location>
        <severity>Low</severity>
        <confidence>Certain</confidence>
        <issueBackground><![CDATA[<p>Most browsers have a facility to remember user credentials that are entered into HTML forms. This function can be configured by the user and also by applications that employ user credentials. If the function is enabled, then credentials entered by the user are stored on their local computer and retrieved by the browser on future visits to the same application.</p>
<p>The stored credentials can be captured by an attacker who gains control over the user's computer. Further, an attacker who finds a separate application vulnerability such as cross-site scripting may be able to exploit this to retrieve a user's browser-stored credentials. </p>]]></issueBackground>
        <remediationBackground><![CDATA[<p>To prevent browsers from storing credentials entered into HTML forms, include the attribute <b>autocomplete="off"</b> within the FORM tag (to protect all form fields) or within the relevant INPUT tags (to protect specific individual fields).</p>
<p>Please note that modern web browsers may ignore this directive. In spite of this there is a chance that not disabling autocomplete may cause problems obtaining PCI compliance.</p>]]></remediationBackground>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/200.html">CWE-200: Information Exposure</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The page contains a form with the following action URL:<ul><li>http://testhtml5.vulnweb.com/login</li></ul>The form contains the following password field with autocomplete enabled:<ul><li>password</li></ul>]]></issueDetail>
        <issueDetailItems>
            <issueDetailItem><![CDATA[password]]></issueDetailItem>
        </issueDetailItems>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC8gSFQ=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>6088909150592436224</serialNumber>
        <type>5244160</type>
        <name><![CDATA[Cross-domain script include]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/]]></path>
        <location><![CDATA[/]]></location>
        <severity>Information</severity>
        <confidence>Certain</confidence>
        <issueBackground><![CDATA[<p>When an application includes a script from an external domain, this script is executed by the browser within the security context of the invoking application. The script can therefore do anything that the application's own scripts can do, such as accessing application data and performing actions within the context of the current user.</p>
<p>If you include a script from an external domain, then you are trusting that domain with the data and functionality of your application, and you are trusting the domain's own security to prevent an attacker from modifying the script to perform malicious actions within your application. </p>]]></issueBackground>
        <remediationBackground>
            <![CDATA[<p>Scripts should not be included from untrusted domains. Applications that rely on third-party scripts should consider copying the contents of these scripts onto their own domain and including them from there. If that is not possible (e.g. for licensing reasons) then consider reimplementing the script's functionality within application code.</p>]]></remediationBackground>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/829.html">CWE-829: Inclusion of Functionality from Untrusted Control Sphere</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The response dynamically includes the following scripts from other domains:<ul><li>http://bxss.s3.amazonaws.com/ad.js</li><li>http://code.jquery.com/jquery-1.9.1.min.js</li><li>http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/js/bootstrap.min.js</li><li>https://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js</li></ul>]]></issueDetail>
        <issueDetailItems>
            <issueDetailItem><![CDATA[http://bxss.s3.amazonaws.com/ad.js]]></issueDetailItem>
            <issueDetailItem><![CDATA[http://code.jquery.com/jquery-1.9.1.min.js]]></issueDetailItem>
            <issueDetailItem>
                <![CDATA[http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/js/bootstrap.min.js]]></issueDetailItem>
            <issueDetailItem>
                <![CDATA[https://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js]]></issueDetailItem>
        </issueDetailItems>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC8gSFQ=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>2977970596435352576</serialNumber>
        <type>2098688</type>
        <name><![CDATA[Cross-origin resource sharing]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/]]></path>
        <location><![CDATA[/]]></location>
        <severity>Information</severity>
        <confidence>Certain</confidence>
        <issueBackground><![CDATA[<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>
<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>]]></issueBackground>
        <remediationBackground>
            <![CDATA[<p>Any inappropriate domains should be removed from the CORS policy.</p>]]></remediationBackground>
        <references><![CDATA[<ul>
  <li> <a href="http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html">Exploiting CORS Misconfigurations</a> </li>
</ul>]]></references>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/942.html">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.]]></issueDetail>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC8gSFQ=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>8537425721291634688</serialNumber>
        <type>2097920</type>
        <name><![CDATA[Cross-site scripting (reflected)]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/]]></path>
        <location><![CDATA[/ [username cookie]]]></location>
        <severity>Medium</severity>
        <confidence>Certain</confidence>
        <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
        <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
        <references>
            <![CDATA[<ul><li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li></ul>]]></references>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The value of the <b>username</b> cookie is copied into the HTML document as plain text between tags. The payload <b>fij9g&lt;script&gt;alert(1)&lt;/script&gt;u6mj8</b> was submitted in the username cookie. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain "cookie-forcing" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability.]]></issueDetail>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC8gSFQ=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>16757155819560960</serialNumber>
        <type>4197376</type>
        <name><![CDATA[Input returned in response (reflected)]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/]]></path>
        <location><![CDATA[/ [username cookie]]]></location>
        <severity>Information</severity>
        <confidence>Certain</confidence>
        <issueBackground>
            <![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The value of the <b>username</b> cookie is copied into the application's response.]]></issueDetail>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC8gSFQ=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>3187712182062532608</serialNumber>
        <type>2098689</type>
        <name><![CDATA[Cross-origin resource sharing: arbitrary origin trusted]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/]]></path>
        <location><![CDATA[/]]></location>
        <severity>Information</severity>
        <confidence>Certain</confidence>
        <issueBackground><![CDATA[<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>
Trusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>
<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>]]></issueBackground>
        <remediationBackground>
            <![CDATA[<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>]]></remediationBackground>
        <references><![CDATA[<ul>
  <li> <a href="http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html">Exploiting CORS Misconfigurations</a> </li>
</ul>]]></references>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/942.html">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>http://xfiawzhvuyhv.com</strong><br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.]]></issueDetail>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC8gSFQ=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>739427693458120704</serialNumber>
        <type>4194592</type>
        <name><![CDATA[User agent-dependent response]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/]]></path>
        <location><![CDATA[/]]></location>
        <severity>Information</severity>
        <confidence>Firm</confidence>
        <issueBackground><![CDATA[<p>Application responses may depend systematically on the value of the User-Agent header in requests. This behavior does not itself constitute a security vulnerability, but may point towards additional attack surface within the application, which may contain vulnerabilities.</p>
<p>This behavior often arises because applications provide different user interfaces for desktop and mobile users. Mobile interfaces have often been less thoroughly tested for vulnerabilities such as cross-site scripting, and often have simpler authentication and session handling mechanisms that may contain problems that are not present in the full interface.</p>
<p>To review the interface provided by the alternate User-Agent header, you can configure a match/replace rule in Burp Proxy to modify the User-Agent header in all requests, and then browse the application in the normal way using your normal browser. </p>]]></issueBackground>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/16.html">CWE-16: Configuration</a></li>
</ul>]]></vulnerabilityClassifications>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC8gSFQ=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC8gSFQ=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>2532742526165530624</serialNumber>
        <type>2097936</type>
        <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/]]></path>
        <location><![CDATA[/]]></location>
        <severity>High</severity>
        <confidence>Firm</confidence>
        <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
        <remediationBackground>
            <![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>top.name</b> and passed to <b>the 'innerHTML' property of a DOM element</b> via the following statement:<ul><li>d.innerHTML= '&lt;div s ...&lt;br/&gt;' ) + '&lt;/div&gt;' </li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC8gSFQ=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC9zdGE=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>5772720156769164288</serialNumber>
        <type>2097936</type>
        <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/]]></path>
        <location><![CDATA[/]]></location>
        <severity>Medium</severity>
        <confidence>Firm</confidence>
        <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
        <remediationBackground>
            <![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>document.cookie</b> and passed to <b>the 'html()' function of JQuery</b> via the following statements:<ul><li>var c_value = document.cookie;</li><li>c_value = unescape(c_value.substring(c_start,c_end));</li><li>return c_value;</li><li>var cookieUsername = getCookie("username");</li><li>$("#refId").html(cookieUsername + " is coming from &lt;b&gt;" + referrer + "&lt;/b&gt; and has visited this page &lt;b&gt;" + (sessvars.pageCount)  + "&lt;/b&gt; times.");</li></ul>Because the data originates from a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain "cookie-forcing" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability. ]]></issueDetail>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC8gSFQ=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC9zdGE=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>7719839361717393408</serialNumber>
        <type>2097936</type>
        <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/]]></path>
        <location><![CDATA[/]]></location>
        <severity>High</severity>
        <confidence>Firm</confidence>
        <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
        <remediationBackground>
            <![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>document.referrer</b> and passed to <b>the 'html()' function of JQuery</b> via the following statements:<ul><li>referrer = document.referrer;</li><li>$("#refId").html(cookieUsername + " is coming from &lt;b&gt;" + referrer + "&lt;/b&gt; and has visited this page &lt;b&gt;" + (sessvars.pageCount)  + "&lt;/b&gt; times.");</li></ul>]]></issueDetail>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC8gSFQ=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC9zdGE=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>782658992732376064</serialNumber>
        <type>2097936</type>
        <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/]]></path>
        <location><![CDATA[/]]></location>
        <severity>High</severity>
        <confidence>Firm</confidence>
        <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
        <remediationBackground>
            <![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>window.location.href</b> and passed to <b>document.write()</b> via the following statement:<ul><li>document.write('&lt;div class="fb-comments" data-num-posts="4" data-width="470"  data-href="'+window.location.href+'"&gt;&lt;/div&gt;')</li></ul>]]></issueDetail>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC8gSFQ=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC9zdGE=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>3671913061968777216</serialNumber>
        <type>5244416</type>
        <name><![CDATA[Cookie without HttpOnly flag set]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/login]]></path>
        <location><![CDATA[/login]]></location>
        <severity>Information</severity>
        <confidence>Certain</confidence>
        <issueBackground>
            <![CDATA[<p>If the HttpOnly attribute is set on a cookie, then the cookie's value cannot be read or set by client-side JavaScript. This measure makes certain client-side attacks, such as cross-site scripting, slightly harder to exploit by preventing them from trivially capturing the cookie's value via an injected script.</p>]]></issueBackground>
        <remediationBackground><![CDATA[<p>There is usually no good reason not to set the HttpOnly flag on all cookies. Unless you specifically require legitimate client-side scripts within your application to read or set a cookie's value, you should set the HttpOnly flag by including this attribute within the relevant Set-cookie directive.</p>
<p>You should be aware that the restrictions imposed by the HttpOnly flag can potentially be circumvented in some circumstances, and that numerous other serious attacks can be delivered by client-side script injection, aside from simple cookie stealing. </p>]]></remediationBackground>
        <references><![CDATA[<ul>
<li><a href='https://www.owasp.org/index.php/HttpOnly'>Configuring HttpOnly</a></li>
</ul>]]></references>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/16.html">CWE-16: Configuration</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The following cookie was issued by the application and does not have the HttpOnly flag set:<ul><li>username</li></ul>The cookie does not appear to contain a session token, which may reduce the risk associated with this issue. You should review the contents of the cookie to determine its function.]]></issueDetail>
        <issueDetailItems>
            <issueDetailItem><![CDATA[Other: username]]></issueDetailItem>
        </issueDetailItems>
        <requestresponse>
            <request method="POST" base64="true"><![CDATA[UE9TVCAvbG8=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>369054908825305088</serialNumber>
        <type>2097920</type>
        <name><![CDATA[Cross-site scripting (reflected)]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/login]]></path>
        <location><![CDATA[/login [username parameter]]]></location>
        <severity>High</severity>
        <confidence>Certain</confidence>
        <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
        <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
        <references>
            <![CDATA[<ul><li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li></ul>]]></references>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The value of the <b>username</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>r6d2i&lt;script&gt;alert(1)&lt;/script&gt;ck6ap</b> was submitted in the username parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that a redirection occurred between the attack request and the response containing the echoed input. It is necessary to follow this redirection for the attack to succeed. When the attack is carried out via a browser, the redirection will be followed automatically.]]></issueDetail>
        <requestresponse>
            <request method="POST" base64="true"><![CDATA[UE9TVCAvbG8=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>3294143493608708096</serialNumber>
        <type>4197376</type>
        <name><![CDATA[Input returned in response (reflected)]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/login]]></path>
        <location><![CDATA[/login [username parameter]]]></location>
        <severity>Information</severity>
        <confidence>Certain</confidence>
        <issueBackground>
            <![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The value of the <b>username</b> request parameter is copied into the application's response.]]></issueDetail>
        <requestresponse>
            <request method="POST" base64="true"><![CDATA[UE9TVCAvbG8=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>6158245247622239232</serialNumber>
        <type>8389120</type>
        <name><![CDATA[HTML does not specify charset]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/login]]></path>
        <location><![CDATA[/login]]></location>
        <severity>Information</severity>
        <confidence>Certain</confidence>
        <issueBackground><![CDATA[<p>If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>
<p>In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
        <remediationBackground><![CDATA[<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.
</p>]]></remediationBackground>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/16.html">CWE-16: Configuration</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/436.html">CWE-436: Interpretation Conflict</a></li>
</ul>]]></vulnerabilityClassifications>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC9sb2c=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>6247085375712026624</serialNumber>
        <type>2097936</type>
        <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/static/app/libs/sessvars.js]]></path>
        <location><![CDATA[/static/app/libs/sessvars.js]]></location>
        <severity>High</severity>
        <confidence>Firm</confidence>
        <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
        <remediationBackground>
            <![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>top.name</b> and passed to <b>the 'innerHTML' property of a DOM element</b> via the following statement:<ul><li>d.innerHTML= '&lt;div s ...&lt;br/&gt;' ) + '&lt;/div&gt;' </li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC9zdGE=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>1558410663713792</serialNumber>
        <type>2097936</type>
        <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/static/app/post.js]]></path>
        <location><![CDATA[/static/app/post.js]]></location>
        <severity>Medium</severity>
        <confidence>Firm</confidence>
        <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
        <remediationBackground>
            <![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>document.cookie</b> and passed to <b>the 'html()' function of JQuery</b> via the following statements:<ul><li>var c_value = document.cookie;</li><li>c_value = unescape(c_value.substring(c_start,c_end));</li><li>return c_value;</li><li>var cookieUsername = getCookie("username");</li><li>$("#refId").html(cookieUsername + " is coming from &lt;b&gt;" + referrer + "&lt;/b&gt; and has visited this page &lt;b&gt;" + (sessvars.pageCount)  + "&lt;/b&gt; times.");</li></ul>Because the data originates from a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain "cookie-forcing" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability. ]]></issueDetail>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC9zdGE=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>8592096594240007168</serialNumber>
        <type>2097936</type>
        <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/static/app/post.js]]></path>
        <location><![CDATA[/static/app/post.js]]></location>
        <severity>High</severity>
        <confidence>Firm</confidence>
        <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
        <remediationBackground>
            <![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>document.referrer</b> and passed to <b>the 'html()' function of JQuery</b> via the following statements:<ul><li>referrer = document.referrer;</li><li>$("#refId").html(cookieUsername + " is coming from &lt;b&gt;" + referrer + "&lt;/b&gt; and has visited this page &lt;b&gt;" + (sessvars.pageCount)  + "&lt;/b&gt; times.");</li></ul>]]></issueDetail>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC9zdGE=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
    <issue>
        <serialNumber>7753379995460134912</serialNumber>
        <type>2097936</type>
        <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
        <host ip="176.28.50.165">http://testhtml5.vulnweb.com</host>
        <path><![CDATA[/static/app/post.js]]></path>
        <location><![CDATA[/static/app/post.js]]></location>
        <severity>High</severity>
        <confidence>Firm</confidence>
        <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
        <remediationBackground>
            <![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
        <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
        <issueDetail>
            <![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>window.location.href</b> and passed to <b>document.write()</b> via the following statement:<ul><li>document.write('&lt;div class="fb-comments" data-num-posts="4" data-width="470"  data-href="'+window.location.href+'"&gt;&lt;/div&gt;')</li></ul>]]></issueDetail>
        <requestresponse>
            <request method="GET" base64="true"><![CDATA[R0VUIC9zdGE=]]></request>
            <response base64="true"><![CDATA[SFRUUC8xLjE=]]></response>
            <responseRedirected>false</responseRedirected>
        </requestresponse>
    </issue>
</issues>
